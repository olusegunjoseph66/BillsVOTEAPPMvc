# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

#we setup the trigger which set pipeline to run when we push code

# trigger:
#  branches:
#    include:
#      - main

# pool:
#  vmImage: 'window-latest'

# variables:
#   BuildPlatform: 'Any CPU'
#   BuildConfiguration: 'Release'
#   solution: '**/VOTEAPPMvc.sln'
#   project:  '**/VOTEAPPMvc.csproj'


# steps:
  
# - task: NuGetToolInstaller@1
#   displayName: 'Install NuGet'

# - task: DotNetCoreCLI@2
#   displayName: 'Restore NuGet'
#   inputs:
#     azureSubscription: 'Subscription 1(472bfb0f-042b-45c5-900d-7532f9fb0d97)'
#     command: 'restore'
#     projects: '$(solution)'
#     feedsToUse: 'select'


# - task: DotNetCoreCLI@2
#   displayName: 'Build NuGet'
#   inputs:
#     azureSubscription: 'Subscription 1(472bfb0f-042b-45c5-900d-7532f9fb0d97)'
#     command: 'build'
#     projects: '$(solution)'
#     arguments: '--configuration $(BuildConfiguration)'

# - task: DotNetCoreCLI@2
#   displayName: 'Publish NuGet'
#   inputs:
#     azureSubscription: 'Subscription 1(472bfb0f-042b-45c5-900d-7532f9fb0d97)'
#     command: 'publish'
#     publishWebProjects: true
#     arguments: '--configuration $(buildConfiguration)  --output $(Build.ArtifactStagingDirectory)'
#     zipAfterPublish: false

# - task: PublishBuildArtifacts@1
#   displayName: 'Pubish Artifact'
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     ArtifactName: 'BillingPipe'
#     publishLocation: 'Container'

trigger:
- main  # Or your specific branch

variables:
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  solution: '**/VOTEAPPMvc.sln'  # Better to specify solution file

pool:
  name: Default  # Your self-hosted pool name
  demands:
  - agent.os -equals Windows_NT  # OS requirement
  # Add any other capabilities your build requires
  # - msbuild -exists
  # - visualstudio -exists
  # - dotnetcore -exists

steps:
# Checkout with cleanup
- checkout: self
  clean: true  # Ensures fresh workspace
  fetchDepth: 1  # Shallow clone for faster builds
  displayName: 'Checkout code'

# NuGet package restore
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet'
  condition: succeeded()  # Only run if checkout succeeds

- task: NuGetCommand@2
  displayName: 'Restore packages'
  inputs:
    command: 'restore'
    restoreSolution: '$(solution)'
    feedsToUse: 'select'
    vstsFeed: 'Your-Feed-ID'  # If using Azure Artifacts

# Build solution
- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration) --no-restore'
    publishWebProjects: false


# Publish artifacts
- task: DotNetCoreCLI@2
  displayName: 'Publish artifacts'
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Upload artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
